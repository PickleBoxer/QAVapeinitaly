name: Playwright Tests
on:
  ## Manual execution on branch
  workflow_dispatch:
  ## Nightly
  ### Needs secrets
  #### QA_UPLOAD_TOKEN
  #### TEST_USER_EMAIL
  #### TEST_USER_PASSWORD
  #### API_BASE_URL
  schedule:
    - cron: '0 0 * * *'
jobs:
  test:
    name: Run Playwright Tests
    if: ${{ github.event_name == 'schedule' }} || ${{ github.event_name == 'workflow_dispatch' }}
    timeout-minutes: 60
    runs-on: ubuntu-latest
    env:
      TOKEN: ${{ secrets.QA_UPLOAD_TOKEN }}
      CAMPAIGN: "vapeinitaly"
      PLATFORM: "chromium"
      API_BASE_URL: ${{ secrets.API_BASE_URL }}
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
        cache: 'npm'
        cache-dependency-path: package-lock.json
    
    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: |
          ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright Browsers
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install chromium --with-deps
    
    - name: Install Playwright system dependencies only
      if: steps.playwright-cache.outputs.cache-hit == 'true'
      run: npx playwright install-deps
    
    - name: Run Playwright tests
      env:
        TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
        TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      run: npx playwright test

    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30
    
    - name: Rename results.json to production filename
      if: always()  # Run even if tests failed
      run: |
        mv results.json "$(date +%Y-%m-%d)-production.json"
        echo "FILENAME=$(date +%Y-%m-%d)-production.json" >> $GITHUB_ENV
    
    - name: Upload results to API
      id: upload-results
      if: always()  # Upload results even if tests failed
      run: |
        curl -X POST "${API_BASE_URL}/upload" \
          -F "report=@${FILENAME}" \
          -F "token=${TOKEN}"
    
    - name: Notify API of new report
      if: steps.upload-results.outcome == 'success'  # Only run if upload succeeded
      run: |
        curl -v "${API_BASE_URL}/playwright?token=${TOKEN}&filename=${FILENAME}&campaign=${CAMPAIGN}&platform=${PLATFORM}"
